controllers:
  sonarr:
    annotations:
      reloader.stakater.com/auto: "true"

    pod:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        supplementalGroups:
          - 65542 # gladius:external-services

      # initContainers:
      #   - name: init-chmod
      #     image:
      #       repository: busybox
      #       tag: latest
      #     command:
      #       - sh
      #       - -c
      #       - chown -R 1000:1000 /config && chmod -R 755 /config
      #     securityContext:
      #       runAsUser: 0

    containers:
      app:
        image:
          repository: ghcr.io/home-operations/sonarr
          tag: 4.0.14.2938
          pullPolicy: IfNotPresent
        env:
          SONARR__APP__INSTANCENAME: Sonarr
          SONARR__AUTH__APIKEY:
            valueFrom:
              secretKeyRef:
                name: sonarr-secret
                key: api_key
          SONARR__AUTH__METHOD: External
          SONARR__AUTH__REQUIRED: DisabledForLocalAddresses
          SONARR__LOG__DBENABLED: "False"
          SONARR__LOG__LEVEL: info
          SONARR__SERVER__PORT: &port 80
          SONARR__UPDATE__BRANCH: develop
        probes:
          liveness: &probes
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: *port
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness: *probes
        resources:
          requests:
            cpu: 20m
            memory: 384Mi
          limits:
            memory: 2Gi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - ALL

service:
  app:
    controller: sonarr
    ports:
      http:
        port: *port

persistence:
  config:
    enabled: true
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    size: 2Gi
    storageClass: longhorn
    globalMounts:
      - path: /config
  config-cache:
    enabled: true
    type: persistentVolumeClaim
    accessMode: ReadWriteOnce
    size: 10Gi
    storageClass: longhorn
    globalMounts:
      - path: /config/MediaCover
  add-ons:
    type: emptyDir
  tmp:
    type: emptyDir
  media:
    type: nfs
    server: 192.168.0.217
    path: /volume1/Media/Shows
    globalMounts:
      - path: /media

ingress:
  app:
    className: internal
    hosts:
      - host: "{{ .Release.Name }}.rbl.lol"
        paths:
          - path: /
            service:
              name: app
              port: *port
